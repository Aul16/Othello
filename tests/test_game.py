from gameOthello.game import *
from pytest import *


def test_create_board():
    game = Game(2)
    assert game.create_board() == [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 1, 0, 0, 0],
        [0, 0, 0, 1, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]

    game = Game(3)
    assert game.create_board() == [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 1, 2, 0, 0, 0],
        [0, 0, 0, 2, 3, 1, 0, 0, 0],
        [0, 0, 0, 1, 2, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]

    game = Game(4)
    assert game.create_board() == [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 1, 2, 3, 0, 0, 0],
        [0, 0, 0, 3, 4, 1, 2, 0, 0, 0],
        [0, 0, 0, 2, 3, 4, 1, 0, 0, 0],
        [0, 0, 0, 1, 2, 3, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]


def test_count_player_points():
    game = Game(2)
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 2, 1, 1, 1, 0, 0],
        [0, 2, 0, 1, 1, 0, 0, 0],
        [0, 0, 2, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    assert game.count_player_points(game.grid) == [9, 4]

    game = Game(3)
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 3, 3, 3, 1, 3, 0],
        [0, 0, 0, 3, 3, 1, 1, 0, 0],
        [0, 0, 3, 2, 2, 1, 2, 0, 0],
        [0, 0, 0, 2, 0, 1, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
    assert game.count_player_points(game.grid) == [6, 4, 8]

    game = Game(4)
    game.grid = [
        [4, 4, 4, 4, 4, 1, 1, 1, 2, 3],
        [4, 4, 3, 4, 4, 4, 4, 4, 1, 4],
        [4, 3, 4, 3, 4, 4, 4, 3, 4, 4],
        [4, 4, 3, 3, 4, 1, 4, 4, 4, 4],
        [4, 3, 2, 2, 2, 2, 1, 4, 2, 2],
        [4, 4, 2, 4, 3, 3, 2, 1, 4, 2],
        [4, 4, 2, 3, 4, 4, 3, 2, 1, 2],
        [4, 3, 2, 3, 2, 1, 1, 3, 2, 2],
        [4, 4, 2, 2, 2, 2, 2, 2, 3, 2],
        [4, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    ]
    assert game.count_player_points(game.grid) == [10, 24, 25, 41]


def test_who_won():
    game = Game(2)
    grid = [[1 for _ in range(8)] for _ in range(4)] + [
        [2 for _ in range(8)] for _ in range(4)
    ]
    game.grid = grid
    assert game.who_won() == [1, 2]
    game.grid = [[1 for _ in range(8)] for _ in range(8)]
    assert game.who_won() == [1]


def test_coups_possibles():  # Faire attention à l'ordre de parcours qui va influencer sur l'ordre des positions dans le dictionnaire (haut puis sens horaire)
    game = Game(2)
    assert game.coups_possibles(
        [
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0, 0],
            [0, 0, 2, 1, 1, 1, 0, 0],
            [0, 2, 0, 1, 1, 0, 0, 0],
            [0, 0, 2, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
        ],
        2,
    ) == {
        (1, 5): [(2, 4), (3, 3)],
        (2, 6): [(2, 5), (2, 4), (2, 3)],
        (3, 5): [(2, 4)],
        (4, 5): [(4, 4), (4, 3)],
        (5, 5): [(4, 4), (3, 3)],
        (6, 3): [(5, 3), (4, 3), (3, 3), (2, 3)],
        (6, 4): [(5, 3)],
    }
    assert game.coups_possibles(
        [
            [1, 2, 2, 2, 2, 2, 0, 0],
            [2, 1, 2, 2, 2, 2, 0, 0],
            [2, 1, 1, 1, 1, 2, 0, 0],
            [2, 2, 2, 2, 2, 2, 0, 0],
            [2, 0, 2, 2, 2, 2, 0, 0],
            [0, 2, 2, 2, 2, 2, 2, 2],
            [0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
        ],
        1,
    ) == {
        (0, 6): [(1, 5), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1)],
        (1, 6): [(1, 5), (1, 4), (1, 3), (1, 2)],
        (2, 6): [(2, 5)],
        (4, 1): [(3, 1), (3, 2)],
        (4, 6): [(3, 5)],
        (5, 0): [(4, 0), (3, 0), (2, 0), (1, 0)],
        (6, 0): [(5, 1), (4, 2), (3, 3)],
        (6, 3): [(5, 3), (4, 3), (3, 3)],
        (6, 4): [(5, 4), (4, 4), (3, 4)],
        (6, 5): [(5, 4), (4, 3), (3, 2)],
        (6, 6): [(5, 5), (4, 4), (3, 3)],
        (6, 7): [(5, 6), (4, 5), (3, 4)],
        (7, 2): [(6, 2), (5, 2), (4, 2), (3, 2)],
    }
    assert (
        game.coups_possibles(  # Même situation mais les blancs ne peuvent pas jouer
            [
                [1, 2, 2, 2, 2, 2, 0, 0],
                [2, 1, 2, 2, 2, 2, 0, 0],
                [2, 1, 1, 1, 1, 2, 0, 0],
                [2, 2, 2, 2, 2, 2, 0, 0],
                [2, 0, 2, 2, 2, 2, 0, 0],
                [0, 2, 2, 2, 2, 2, 2, 2],
                [0, 0, 2, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
            ],
            2,
        )
        == {}
    )
    assert game.coups_possibles(
        [
            [0, 0, 0, 1, 0, 0, 0, 0],
            [2, 0, 0, 1, 1, 2, 0, 0],
            [0, 2, 1, 1, 1, 2, 0, 0],
            [0, 2, 2, 2, 1, 2, 0, 0],
            [0, 0, 2, 2, 2, 1, 0, 0],
            [0, 2, 2, 2, 2, 2, 2, 2],
            [0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
        ],
        2,
    ) == {
        (0, 2): [(1, 3), (2, 4)],
        (0, 4): [(1, 4), (2, 4), (3, 4), (1, 3), (2, 2)],
        (0, 5): [(1, 4), (2, 3)],
        (1, 1): [(2, 2)],
        (1, 2): [
            (1, 3),
            (1, 4),
            (2, 3),
            (3, 4),
            (4, 5),
            (2, 2),
        ],  # La ligne la plus importante du test
        (3, 6): [(4, 5)],
        (4, 6): [(4, 5)],
    }
    assert game.coups_possibles(
        [
            [1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 2, 1, 1, 1, 0, 1],
            [1, 0, 2, 2, 1, 2, 1, 1],
            [1, 0, 0, 1, 2, 1, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1],
            [2, 2, 2, 0, 2, 2, 2, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0],
        ],
        1,
    ) == {
        (1, 1): [(1, 2), (2, 2)],
        (1, 6): [(2, 5), (3, 4)],
        (2, 1): [(1, 2), (2, 2), (2, 3)],
        (3, 1): [(2, 2)],
        (3, 2): [(2, 2), (1, 2), (2, 3)],
        (5, 3): [(5, 4), (5, 5), (5, 6)],
        (6, 1): [(5, 2)],
        (6, 2): [(5, 2), (5, 1)],
        (6, 3): [(5, 4), (5, 2), (4, 1)],
        (6, 4): [(5, 4), (5, 5), (4, 6)],
        (6, 5): [(5, 5), (5, 6), (5, 4)],
        (6, 6): [(5, 6), (4, 6), (3, 6), (5, 5)],
    }  # Test bug fix indice négatif

    assert game.coups_possibles(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 2, 3, 3, 0, 0],
            [0, 2, 2, 2, 2, 2, 3, 0, 0, 0],
            [0, 4, 0, 1, 3, 3, 3, 3, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ],
        4,
    ) == {(3, 1): [(4, 1)], (2, 4): [(3, 3), (4, 2)]}


def test_jouer_coup():
    game = Game(2)
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 2, 1, 1, 1, 0, 0],
        [0, 2, 0, 1, 1, 0, 0, 0],
        [0, 0, 2, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    player = 2
    coup = (6, 3)
    newgrid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 2, 2, 1, 1, 0, 0],
        [0, 2, 0, 2, 1, 0, 0, 0],
        [0, 0, 2, 2, 1, 0, 0, 0],
        [0, 0, 0, 2, 1, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    game.moves_possible = game.coups_possibles(game.grid, player)
    assert game.jouer_coup(player, coup) == None
    assert game.grid == newgrid

    game.grid = [
        [1, 2, 2, 2, 2, 2, 0, 0],
        [2, 1, 2, 2, 2, 2, 0, 0],
        [2, 1, 1, 1, 1, 2, 0, 0],
        [2, 2, 2, 2, 2, 2, 0, 0],
        [2, 0, 2, 2, 2, 2, 0, 0],
        [0, 2, 2, 2, 2, 2, 2, 2],
        [0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    player = 1
    coup = (0, 6)
    newgrid = [
        [1, 1, 1, 1, 1, 1, 1, 0],
        [2, 1, 2, 2, 2, 1, 0, 0],
        [2, 1, 1, 1, 1, 2, 0, 0],
        [2, 2, 2, 2, 2, 2, 0, 0],
        [2, 0, 2, 2, 2, 2, 0, 0],
        [0, 2, 2, 2, 2, 2, 2, 2],
        [0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    game.moves_possible = game.coups_possibles(game.grid, player)
    assert game.jouer_coup(player, coup) == None
    assert game.grid == newgrid

    game.grid = [
        [0, 0, 0, 1, 0, 0, 0, 0],
        [2, 0, 0, 1, 1, 2, 0, 0],
        [0, 2, 1, 1, 1, 2, 0, 0],
        [0, 2, 2, 2, 1, 2, 0, 0],
        [0, 0, 2, 2, 2, 1, 0, 0],
        [0, 2, 2, 2, 2, 2, 2, 2],
        [0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    player = 2
    coup = (1, 2)
    newgrid = [
        [0, 0, 0, 1, 0, 0, 0, 0],
        [2, 0, 2, 2, 2, 2, 0, 0],
        [0, 2, 2, 2, 1, 2, 0, 0],
        [0, 2, 2, 2, 2, 2, 0, 0],
        [0, 0, 2, 2, 2, 2, 0, 0],
        [0, 2, 2, 2, 2, 2, 2, 2],
        [0, 0, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]
    game.moves_possible = game.coups_possibles(game.grid, player)
    assert game.jouer_coup(player, coup) == None
    assert game.grid == newgrid


def test_is_grid_full():
    game = Game(2)
    game.grid = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 2, 1, 1, 1, 1, 1],
        [1, 2, 1, 2, 1, 1, 1, 1],
        [1, 0, 2, 1, 2, 1, 1, 1],
        [1, 0, 2, 2, 1, 1, 1, 1],
        [0, 0, 2, 2, 2, 1, 1, 1],
        [0, 0, 0, 2, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 1],
    ]
    assert game.is_grid_full(game.grid) == False

    game.grid = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [0, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 2, 2, 2, 2, 2, 2],
    ]
    assert game.is_grid_full(game.grid) == True

    game.grid = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 2, 1, 1, 1, 1, 1],
        [1, 1, 2, 2, 1, 1, 1, 1],
        [1, 1, 2, 1, 1, 1, 1, 1],
        [1, 2, 1, 1, 1, 1, 1, 1],
        [1, 1, 2, 2, 2, 1, 1, 1],
        [1, 2, 1, 1, 1, 1, 1, 1],
        [2, 1, 1, 1, 1, 1, 1, 1],
    ]

    assert game.is_grid_full(game.grid) == True


def test_minmax():
    game = Game(2)

    game.grid = [
        [0, 1, 1, 1, 1, 1, 1, 2],
        [0, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 2],
    ]  # Meilleur coup (0,0) pour 2
    assert game.minmax(game.grid, 2, 1)[1] == (0, 0)
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 2, 2, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]  # Meilleur coup (0,0) pour 2, pour un même gain ou peu supérieur de pion, viser les coins
    assert game.minmax(game.grid, 2, 1)[1] == (0, 0)
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 2, 2, 2, 0, 0],
        [0, 0, 0, 2, 1, 2, 0, 0],
        [0, 0, 0, 2, 0, 2, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0, 0, 0],
    ]  # Meilleur coup (4,5) pour 2, chercher a se grouper plus qu'a s'eparpiller
    assert game.minmax(game.grid, 2, 1)[1] == (5, 4)
    game.grid = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2, 2, 2, 2],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2, 2, 1, 1],
        [1, 1, 1, 1, 1, 1, 2, 2],
        [2, 2, 2, 2, 2, 2, 2, 2],
        [1, 1, 1, 2, 1, 1, 1, 1],
        [0, 0, 2, 1, 1, 1, 0, 0],
    ]  # fin de partie, avoir le plus de pion
    assert game.minmax(game.grid, 2, 1)[1] == (7, 6)
    game.grid = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2, 2, 2, 2],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [2, 2, 2, 2, 2, 2, 1, 1],
        [1, 1, 1, 1, 1, 1, 2, 2],
        [2, 2, 2, 2, 2, 2, 2, 2],
        [2, 2, 2, 2, 1, 1, 1, 1],
        [0, 0, 2, 1, 1, 1, 2, 2],
    ]  # test si 2 n'a pas de coups possibles
    assert game.minmax(game.grid, 2, 1)[1] == None
    game.grid = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]  # Plusieurs coups equi-utiles
    assert game.minmax(game.grid, 2, 1)[1] in [(5, 3),(5, 5),(3, 5)]


def test_undo():
    game = Game(2)
    game.past_grids.append([[e for e in line] for line in game.grid])
    game.jouer_coup(1, (2, 3))
    game.undo_move()
    assert game.grid == [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 1, 0, 0, 0],
        [0, 0, 0, 1, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]